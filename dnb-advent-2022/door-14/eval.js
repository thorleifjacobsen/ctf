const http = require('http');
let input = process.argv.slice(2).join(" ").trim();

const map = { "1": "🎅", "2": "🎄", "3": "🔔", "4": "🍉","5": "🍇","6": "🍓","7": "🍒","8": "🍍","9": "🥭","0": "🍑","a": "🍎", "b": "🍔", "c": "🍕", "d": "🍩", "e": "🍪", "f": "🍻", "g": "🍼", "h": "🍫", "i": "🍬", "j": "🍭", "k": "🍮", "l": "🍯", "m": "🍴", "n": "🍷", "o": "🍸", "p": "🍹", "q": "🍺", "r": "🍻", "s": "🍽️", "t": "🍾", "u": "🍿", "v": "🎂", "w": "🎠", "x": "🎢", "y": "🎥", "z": "🎨", "A": "🙈", "B": "👾", "C": "🤪", "D": "🤑", "E": "🏏", "F": "🏓", "G": "🏖️", "H": "🏝️", "I": "😈", "J": "🏟️", "K": "🏡", "L": "🏢", "M": "🏣", "N": "🏤", "O": "🏥", "P": "🏦", "Q": "🏨", "R": "🏩", "S": "🏪", "T": "🛳","U": "🚡","V": "🚋","W": "🚝","X": "🚲","Y": "🚂","Z": "🚀","!": "❕","\"": "❤️","#": "💔","$": "💰","%": "💯","&": "💜","'": "💘","(": "👍",")": "👎","*": "✨","+": "➕",",": "💁‍♂️","-": "➖",".": "💁‍♀️","/": "🗡️",":": "💁‍♂️",";": "💁‍♀️","<": "🔙","=": "🔚",">": "🔜","?": "❓","@": "💬","[": "🔝","\\": "⬆️","]": "🔜","^": "🔺","_": "🔻","`": "❄️","{": "🔒","|": "🔐","}": "🔓","~": "🌟" };
const flag = "💰🔒🍇💬🏤🍒💬🍇🔻🤪🍑🤑🏏🔻😈🍇🔻👾🍑🍓🚡🍇🔻😈🔻🤪🔻🍑🎢🤑🏏🙈🤑🤪🍑🤑🏏❕🔓";
const decode = (data) => {
    let newString = "";
    Array.from(data).forEach((char) => {
        if(map.hasOwnProperty(char)) newString += map[char];
        else if(Object.values(map).includes(char)) {
            newString += Object.keys(map)[Object.values(map).indexOf(char)];
        }
        else newString += char;
    })
    return newString;
}

console.log(decode(flag));

const defaultOptions = {
    host: 'santascodeconsole.norwayeast.azurecontainer.io',
    port: 8192,    
    headers: { 'Content-Type': 'application/json' }
}

const post = (path, payload) => new Promise((resolve, reject) => {
    const options = { ...defaultOptions, path, method: 'POST' };
    const req = http.request(options, res => {
        let buffer = "";
        res.on('data', chunk => buffer += chunk)
        res.on('end', () => resolve(JSON.parse(buffer)))
    });
    req.on('error', e => reject(e.message));
    req.write(JSON.stringify(payload));
    req.end();
});

input
(async () => {
    for (let i = 0; i<100; i++) {
        
        let data = { code: input };
        const token = await post("/eval", data);
        // console.log(`Sending: ${data.code}`);
        // console.log(`Result: ${token.result}`);
        // console.log(`Result Decoded: ${decode(token.result)}`);
        input = token.result;
        console.log(`Status: ${decode(input)} ${token.status}`);
        
    }
})()

